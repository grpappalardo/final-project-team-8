# -*- coding: utf-8 -*-
"""script_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hMjxbGxcnkFLlcRHBwgzBsKiv1I26ccL
"""

'''
Gloria Pappalardo & Emily Williams
October 6, 2020
Python 3.8
This script extracts 5-day weather forecast information from the National Weather 
Service website using the BeautifulSoup library. Functionality has been added to 
allow the user to input latitude and longitude in decimal degrees. This information 
is then formatted for readability (fixing spacing issues present in the scraped 
data), as well as converted to all uppercase.
'''

# import required libraries
import requests
from bs4 import BeautifulSoup

# Create an empty list to store response
forecast = []

## Provide the latitude and longitude for the location you would like to check the forecast for

latput = input("Enter latitude in decimal degrees here:") #asking for user input latitude
longput = input("Enter longitude in decimal degrees here:") #asking for user input longitude

#convert user generated lat and long to strings
lat = str(latput)
lon = str(longput)

# Create url for the requested location through string concatenation
url = "https://forecast.weather.gov/MapClick.php?lat="+lat+"&lon="+lon #add user-generated latlong here
# Check if the URL exists
# print url

# Send request to retrieve the web-page using the get() function from the requests library
# The page variable stores the response from the web-page
page = requests.get(url)

# Create a BeautifulSoup object with the response from the URL
# Access contents of the web-page using .content
# html_parser is used since our page is in HTML format
soup=BeautifulSoup(page.content,"html.parser")

# Locate elements on page to be scraped
# findAll() locates all occurrences of div tag with the given class name
# stores it in the BeautifulSoup object
weather_forecast = soup.findAll("li", {"class": "forecast-tombstone"})

# Loop through the BeautifulSoup object to extract text text from every class instance using .text
# Store results in a list
for i in weather_forecast:
    i = i.text
    forecast.append(i)

# Print list to remove unicode characters
for day in forecast:
    day = day.replace("Cloudy ","Cloudy, ") #format output
    day = day.replace("Cloudythen","Cloudy, then")
    day = day.replace("SlightChanceShowersHigh:","Slight Chance Showers; High:")
    day = day.replace("thenChanceShowersHigh:","then Chance Showers; High:")
    day = day.replace("ClearLow:","Clear; Low:")
    day = day.replace("SunnyHigh:","Sunny; High:")
    day = day.replace("Sunnythen","Sunny; Then")
    day = day.replace("ChanceShowers","Chance Showers;")
    day = day.replace("thenPartly","then Partly")
    day = day.replace("ShowersLikely","Showers Likely")
    day = day.replace("andBreezyHigh:","and Breezy; High:")
    day = day.replace("WednesdayNight","Wednesday Night")
    day = day.replace("thenMostly","then Mostly")
    day = day.replace("ThursdayNight","Thursday Night")
    day = day.replace("FridayNight","Friday Night")
    day = day.replace("SaturdayNight","Saturday Night")
    day = day.replace("SundayNight","Sunday Night")
    day = day.replace("CloudyLow:","Cloudy; Low:")
    day = day.replace("RainHigh:","Rain; High:")
    day = day.replace("MondayNight","Monday Night")
    day = day.replace("Rainthen","Rain, then")
    day = day.replace("PartlyCloudy;","Partly Cloudy;")
    day = day.upper() #convert output to upper case
    print(day)