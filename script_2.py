# -*- coding: utf-8 -*-
"""script_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E5PFxO_B85bsldr3QeWjhB2TKtRqzp7o
"""

'''
Gloria Pappalardo & Emily Williams
October 6, 2020
Python 3.8
These scripts explore the results of an investigation undertaken within a humanitarian 
organization tasked with allocating funding throughout Kenya’s counties. As a result 
of a drop in funding, organization staff members were asked to vote (only once!) 
for one county whose programs were deemed “critical,” OR for whose resources were 
most plentiful, in order to maximize the impact of the organization’s humanitarian work. 

The first script defines a function that takes a county name as an argument, and 
returns the number of votes for that particular county.

The second script processes the KEcounty_votes.txt file with separate functions to
munge a string to make it easy to match against, check if someone has voted before,
and finally to count a vote.
'''
from google.colab import files #uploading the KEcounty_votes.txt file
uploaded = files.upload()

#CHALLENGE 1
def vote_count(county):
  with open("KEcounty_votes.txt") as file:
    count = 0
    for line in file:
      line = line.strip()  # strips end's newline
      if county in line:  # if argument is in line, added to counter
        count += 1  # adds to the counter
    print("There are " + str(count) + " votes for " + county +".")  # this prints the total count for county in a sentence
vote_count("Homa Bay")

#CHALLENGE 2
# function 1: munge data
def munge_data (datum):
    datum = datum.strip() # strip blank spaces at beginning and end
    datum = datum.strip().lower().title() # make all text lower case then First Letter Capital
    datum = datum.replace("  ", " ") # remove extra spaces between words
    datum = datum.replace("Mombassa", "Mombasa") #fix spelling error
    return datum # return munged datum

# function 2: check if someone has voted before
voter_list = []
def valid_vote(voter):
    voter = munge_data(voter) # call previous function to munge the names
    if voter in voter_list: # if the person is already in the list, print fraud alert
        print(voter + " is trying to vote more than once! Fraud!\n")
        return False # logic of 'valid vote is False'
    else:
        voter_list.append(voter) # add new name to list
        return True # logic of 'valid vote is True'

# function 3: count vote
counts = {}
def count_votes(vote_file):
    print("Results: \n")
    with open(vote_file) as file:
        for line in file:
            line = munge_data(line) # call munging function
            name, vote = line.split(" - ") # split at break between name and vote
            vote = munge_data(vote)
            name = munge_data(name)
            if valid_vote(name):
                if vote not in counts:
                #First vote for county
                    counts[vote] = 1
                else:
                # vote incrementation
                    counts[vote] += 1
        for name in sorted(counts):
            count = counts[name]
            print(name + ": " + str(count)+" votes")
count_votes("KEcounty_votes.txt")